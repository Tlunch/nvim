{
	"Makefile for Python":{
		"scope": "makefile",
		"prefix": "make",
		"body": [
			".PHONY: local-venv fix-venv update-venv quickstart-docs docs open-docs coverage",
			".ONESHELL:",
			"",
			"SHELL := /bin/bash",
			"",
			"local-venv:",
			"    poetry config virtualenvs.prefer-active-python true --local",
			"    poetry config virtualenvs.in-project true --local",
			"",
			"fix-venv: local-venv",
			"    -deactivate",
			"    -source deactivate",
			"    -poetry env remove python",
			"    rm -rf .venv",
			"    make local-venv",
			"    poetry env use python",
			"    poetry lock",
			"    poetry install",
			"",
			"update-venv:",
			"    poetry update",
			"    poetry install",
			"",
			"quickstart-docs:",
			"    poetry add --group=dev sphinx sphinx-autodoc-typehints docstr-coverage pytest pydocstyle darglint",
			"    poetry run sphinx-quickstart --no-sep --ext-autodoc --ext-todo --ext-viewcode --ext-coverage --ext-doctest --extensions sphinx.ext.napoleon -v `poetry version -s` -r `poetry version -s` ./docs",
			"    echo \"\\nimport sys\\nsys.path.insert(0, './src')\" >> ./docs/conf.py ",
			"    $(MAKE) docs",
			"    $(MAKE) open-docs",
			"",
			"docs:",
			"    poetry run python build_tools/doc.py",
			"    poetry run sphinx-build ./docs ./docs/_build",
			"    $(MAKE) coverage",
			"",
			"open-docs:",
			"    xdg-open ./docs/_build/index.html",
			"",
			"coverage:",
			"    -@poetry run docstr-coverage ./src/ --fail-under 0",
			"    @echo \"\\033[1;31mShame for coverage < 100% !\\033[0m\"",
			"    @echo \"\\033[1;31mThings to fix in the docs:\\033[0m\"",
			"    -@poetry run darglint ./src/ | awk -F':' '{printf \"./%s:%s %s:%s:%s:%s\\n\", \\$\\$1, \\$\\$3, \\$\\$2, \\$\\$4, \\$\\$5, \\$\\$6}'",
			"    @echo \"\\033[1;35mAbove this line is darglint (often a bit pedantic but comply with the PEP257). Bellow this line is pydocstyle which is good to comply with.\\033[0m\"",
			"    -@poetry run pydocstyle -e ./src/",
			""
		]
	},
	"Load to Unit":{
		"scope": "makefile",
		"prefix": "make_load",
		"body": [
			".PHONY: target_unit target_dir load_to_unit authenticate deauthenticate",
			"KEY_PATH := ./.temp_id_rsa",
			"",
			"target_unit:",
			"    @set -eu",
			"    echo \"\"",
			"    echo \"Current Targe Unit: \\$\\$(cat .target_unit)\"",
			"    read -p \"Enter the target unit usr@ip: \" target_unit",
			"    if [ \"\\$\\$target_unit\" != \"\" ]; then \\",
			"        echo \"\\$\\$target_unit\" > .target_unit",
			"    else \\",
			"        echo \"Using previous target\"",
			"    fi",
			"",
			"target_dir:",
			"    @set -eu",
			"    echo \"\"",
			"    echo \"Current Targe Dir: \\$\\$(cat .target_dir)\"",
			"    read -p \"Enter the target directory for applications on the unit (like /usr/local on x1): \" target_dir",
			"    if [ \"\\$\\$target_dir\" != \"\" ]; then \\",
			"        echo \"\\$\\$target_dir\" > .target_dir",
			"    else \\",
			"        echo \"Using previous target\"",
			"    fi",
			"",
			"load_to_unit: target_dir authenticate",
			"    @target_unit=\\$\\$(cat .target_unit)",
			"    @target_dir=\\$\\$(cat .target_dir)",
			"    echo \"Loading to \\$\\$target_unit\" this may take some time.",
			"    -rsync -avzz -e \"ssh -i \\$(KEY_PATH) -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa\" --progress src/*.py \\$\\$target_unit:\\$\\$target_dir/bin/\\$(PROJECT_NAME)/",
			"    -rsync -avzz -e \"ssh -i \\$(KEY_PATH) -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa\" --progress src/supervisor/DEVELOPMENT/\\$(PROJECT_NAME).conf \\$\\$target_unit:\\$\\$target_dir/etc/supervisor/conf.d/",
			"    -rsync -avzz -e \"ssh -i \\$(KEY_PATH) -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa\" --progress src/configs/* \\$\\$target_unit:\\$\\$target_dir/bin/\\$(PROJECT_NAME)/configs/",
			"    make deauthenticate",
			"",
			"authenticate: target_unit",
			"    set -eu",
			"    @ssh-keygen -t rsa -b 2048 -f \\$(KEY_PATH) -q -N \"\"",
			"    target_unit=\\$\\$(cat .target_unit)",
			"    ssh-copy-id -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa -i \\$(KEY_PATH).pub \\$\\$target_unit",
			"",
			"deauthenticate:",
			"    set -eu",
			"    @target_unit=\\$\\$(cat .target_unit)",
			"    key_path=\\$(KEY_PATH)",
			"    -ssh \\$\\$target_unit -i \\$\\$key_path -o PubkeyAcceptedAlgorithms=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa \"grep \\$(KEY_PATH).pub ~/.ssh/authorized_keys > ~/.ssh/ temp && mv ~/.ssh/temp ~/.ssh/authorized_keys\" || true",
			"    rm \\$(KEY_PATH) \\$(KEY_PATH).pub"
		]
	},
	"Bash Shebang":{
		"scope": "shellscript",
		"prefix": "bin/bash",
		"body": [
			"#!/bin/bash",
			"",
			"set -euxo pipefail",
			"",
			"error_handler() {",
			"    set +x",
			"    SCRIPT_NAME=$(basename -- \"\\$0\")",
			"    echo \"Error occurred in \\$SCRIPT_NAME at line: \\${BASH_LINENO[0]}\"",
			"    exit 1",
			"}",
			"trap error_handler ERR",
		]
	}
}
